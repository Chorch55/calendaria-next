// EXPANDED ENTERPRISE PRISMA SCHEMA
// Multi-tenant SaaS with subscription management
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// COMPANY & MULTI-TENANCY
model Company {
  id                String           @id @default(cuid())
  name              String
  slug              String           @unique // For custom domains
  email             String           @unique
  phone             String?
  logo_url          String?
  website           String?
  address           Json?            // Full address object
  timezone          String           @default("UTC")
  
  // Company Settings
  settings          Json?            // Company-specific settings
  branding          Json?            // Custom branding config
  
  // Multi-tenancy
  domain            String?          @unique // Custom domain
  subdomain         String?          @unique // Subdomain
  
  // Status
  is_active         Boolean          @default(true)
  is_verified       Boolean          @default(false)
  verification_token String?         @unique
  
  // Subscription
  subscription      Subscription?
  subscriptionId    String?          @unique
  
  // Current usage tracking
  current_users     Int              @default(0)
  current_storage   BigInt           @default(0) // bytes
  monthly_api_calls Int              @default(0)
  
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  // Relations
  users             User[]
  services          Service[]
  bookings          Booking[]
  payments          Payment[]
  schedules         Schedule[]
  invitations       Invitation[]
  usage_logs        UsageLog[]
  webhooks          WebhookEndpoint[]
  api_keys          ApiKey[]

  @@map("companies")
}

// SUBSCRIPTION MANAGEMENT SYSTEM
model Subscription {
  id                    String               @id @default(cuid())
  companyId             String               @unique
  company               Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Stripe Integration
  stripe_customer_id    String?              @unique
  stripe_subscription_id String?             @unique
  stripe_price_id       String?
  stripe_product_id     String?
  
  // Plan Details
  plan                  SubscriptionPlan     @default(BASIC)
  status                SubscriptionStatus   @default(ACTIVE)
  
  // Billing
  billing_cycle         BillingCycle         @default(MONTHLY)
  unit_amount           Int                  @default(0) // cents
  currency              String               @default("USD")
  
  // Usage Limits
  max_users             Int                  @default(1)
  max_storage           BigInt               @default(1073741824) // 1GB in bytes
  max_api_calls         Int                  @default(1000)
  max_projects          Int?
  max_integrations      Int?
  
  // Features enabled
  features              Json                 @default("{}") // Feature flags
  
  // Important dates
  trial_start           DateTime?
  trial_end             DateTime?
  current_period_start  DateTime
  current_period_end    DateTime
  cancel_at_period_end  Boolean              @default(false)
  canceled_at           DateTime?
  ended_at              DateTime?
  
  // Usage tracking
  last_usage_reset      DateTime             @default(now())
  
  // Relations
  addons                SubscriptionAddon[]
  invoices              Invoice[]
  
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt

  @@map("subscriptions")
}

model SubscriptionAddon {
  id               String       @id @default(cuid())
  subscription_id  String
  subscription     Subscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  
  // Addon details
  addon_type       AddonType
  name             String
  description      String?
  
  // Pricing
  unit_amount      Int          // cents
  quantity         Int          @default(1)
  
  // Stripe
  stripe_price_id  String?
  
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt

  @@map("subscription_addons")
}

model Invoice {
  id                   String         @id @default(cuid())
  subscription_id      String
  subscription         Subscription   @relation(fields: [subscription_id], references: [id])
  
  // Stripe
  stripe_invoice_id    String?        @unique
  
  // Invoice details
  invoice_number       String         @unique
  amount_due           Int            // cents
  amount_paid          Int            @default(0) // cents
  currency             String         @default("USD")
  
  status               InvoiceStatus  @default(DRAFT)
  
  // Dates
  invoice_date         DateTime       @default(now())
  due_date             DateTime
  paid_at              DateTime?
  
  // Invoice data
  line_items           Json           // Invoice line items
  billing_details      Json           // Billing address, etc
  
  created_at           DateTime       @default(now())
  updated_at           DateTime       @updatedAt

  @@map("invoices")
}

// USER MANAGEMENT WITH INVITATIONS
model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  password_hash     String?            // For credentials login
  
  // Company relationship
  company_id        String?
  company           Company?           @relation(fields: [company_id], references: [id], onDelete: SetNull)
  
  // User details
  role              UserRole           @default(USER)
  department        String?
  job_title         String?
  phone             String?
  
  // Permissions and settings
  permissions       Json               @default("[]") // Granular permissions array
  preferences       Json               @default("{}") // User preferences
  
  // Status
  is_active         Boolean            @default(true)
  is_verified       Boolean            @default(false)
  two_factor_enabled Boolean           @default(false)
  
  // Activity tracking
  last_login_at     DateTime?
  last_seen_at      DateTime?
  login_count       Int                @default(0)
  
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt

  // NextAuth.js relations
  accounts          Account[]
  sessions          Session[]

  // Application relations
  bookings_created  Booking[]          @relation("BookingCreatedBy")
  bookings_assigned Booking[]          @relation("BookingAssignedTo")
  schedules         Schedule[]
  time_logs         TimeLog[]
  user_services     UserService[]
  notifications     Notification[]
  tasks_created     Task[]             @relation("TaskCreatedBy")
  tasks_assigned    Task[]             @relation("TaskAssignedTo")
  user_permissions  UserPermission[]
  invitations_sent  Invitation[]       @relation("InvitationSentBy")
  activity_logs     ActivityLog[]

  @@map("users")
}

model Invitation {
  id           String           @id @default(cuid())
  company_id   String
  company      Company          @relation(fields: [company_id], references: [id], onDelete: Cascade)
  
  // Invitation details
  email        String
  role         UserRole         @default(USER)
  department   String?
  job_title    String?
  
  // Invitation management
  token        String           @unique @default(cuid())
  status       InvitationStatus @default(PENDING)
  
  // Relations
  invited_by   String
  inviter      User             @relation("InvitationSentBy", fields: [invited_by], references: [id])
  
  // Dates
  expires_at   DateTime
  accepted_at  DateTime?
  
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  
  @@unique([company_id, email])
  @@map("invitations")
}

// USAGE TRACKING AND ANALYTICS
model UsageLog {
  id         String        @id @default(cuid())
  company_id String
  company    Company       @relation(fields: [company_id], references: [id], onDelete: Cascade)
  
  // Usage details
  resource   UsageResource
  amount     Int
  metadata   Json?         // Additional context
  
  // Tracking
  date       DateTime      @default(now())
  period     String        // "2024-01", "2024-01-15", etc.
  
  @@index([company_id, date])
  @@index([company_id, period])
  @@map("usage_logs")
}

model ActivityLog {
  id         String       @id @default(cuid())
  user_id    String?
  user       User?        @relation(fields: [user_id], references: [id], onDelete: SetNull)
  
  // Activity details
  action     String       // "login", "create_booking", etc.
  resource   String?      // "booking", "user", etc.
  resource_id String?     // ID of the affected resource
  
  // Context
  details    Json?        // Additional details
  ip_address String?
  user_agent String?
  
  created_at DateTime     @default(now())
  
  @@index([user_id, created_at])
  @@index([action, created_at])
  @@map("activity_logs")
}

// API AND WEBHOOKS
model ApiKey {
  id          String    @id @default(cuid())
  company_id  String
  company     Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  
  name        String
  key_hash    String    @unique // Hashed API key
  key_prefix  String    // First few chars for identification
  
  scopes      Json      @default("[]") // Permissions for this key
  
  is_active   Boolean   @default(true)
  expires_at  DateTime?
  last_used   DateTime?
  
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  @@map("api_keys")
}

model WebhookEndpoint {
  id          String          @id @default(cuid())
  company_id  String
  company     Company         @relation(fields: [company_id], references: [id], onDelete: Cascade)
  
  url         String
  events      Json            @default("[]") // Array of event types
  secret      String?         // For signature verification
  is_active   Boolean         @default(true)
  
  // Stats
  success_count Int           @default(0)
  failure_count Int           @default(0)
  last_success  DateTime?
  last_failure  DateTime?
  
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  
  deliveries  WebhookDelivery[]
  
  @@map("webhook_endpoints")
}

model WebhookDelivery {
  id              String          @id @default(cuid())
  endpoint_id     String
  endpoint        WebhookEndpoint @relation(fields: [endpoint_id], references: [id], onDelete: Cascade)
  
  event_type      String
  payload         Json
  response_status Int?
  response_body   String?
  
  attempted_at    DateTime        @default(now())
  delivered_at    DateTime?
  
  @@map("webhook_deliveries")
}

// BUSINESS MODELS
model Service {
  id           String  @id @default(cuid())
  company_id   String
  name         String
  description  String?
  duration     Int // minutes
  price        Decimal @db.Decimal(10, 2)
  is_active    Boolean @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  company       Company       @relation(fields: [company_id], references: [id])
  bookings      Booking[]
  user_services UserService[]

  @@map("services")
}

model UserService {
  id         String @id @default(cuid())
  user_id    String
  service_id String

  user    User    @relation(fields: [user_id], references: [id])
  service Service @relation(fields: [service_id], references: [id])

  @@unique([user_id, service_id])
  @@map("user_services")
}

model Booking {
  id           String   @id @default(cuid())
  company_id   String
  service_id   String
  client_name  String
  client_email String
  client_phone String?
  start_time   DateTime
  end_time     DateTime
  status       String   @default("pending") // pending, confirmed, cancelled, completed
  notes        String?
  created_by   String?
  assigned_to  String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  company      Company  @relation(fields: [company_id], references: [id])
  service      Service  @relation(fields: [service_id], references: [id])
  creator      User?    @relation("BookingCreatedBy", fields: [created_by], references: [id])
  assignee     User?    @relation("BookingAssignedTo", fields: [assigned_to], references: [id])
  payments     Payment[]

  @@map("bookings")
}

model Payment {
  id         String   @id @default(cuid())
  company_id String
  booking_id String?
  amount     Decimal  @db.Decimal(10, 2)
  currency   String   @default("EUR")
  status     String   @default("pending") // pending, completed, failed, refunded
  method     String? // card, cash, transfer
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  company Company  @relation(fields: [company_id], references: [id])
  booking Booking? @relation(fields: [booking_id], references: [id])

  @@map("payments")
}

model Schedule {
  id         String   @id @default(cuid())
  company_id String
  user_id    String
  day_of_week Int     // 0-6 (Sunday to Saturday)
  start_time String  // HH:MM format
  end_time   String  // HH:MM format
  is_active  Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  company Company @relation(fields: [company_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])

  @@unique([company_id, user_id, day_of_week])
  @@map("schedules")
}

model TimeLog {
  id          String   @id @default(cuid())
  user_id     String
  clock_in    DateTime
  clock_out   DateTime?
  total_hours Decimal? @db.Decimal(5, 2)
  notes       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@map("time_logs")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo") // todo, in_progress, completed, cancelled
  priority    String   @default("medium") // low, medium, high, urgent
  due_date    DateTime?
  created_by  String
  assigned_to String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  creator  User  @relation("TaskCreatedBy", fields: [created_by], references: [id])
  assignee User? @relation("TaskAssignedTo", fields: [assigned_to], references: [id])

  @@map("tasks")
}

model Notification {
  id         String   @id @default(cuid())
  user_id    String
  title      String
  message    String
  type       String   @default("info") // info, success, warning, error
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@map("notifications")
}

model UserPermission {
  id         String @id @default(cuid())
  user_id    String
  permission String
  granted_at DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@unique([user_id, permission])
  @@map("user_permissions")
}

// ENUMS
enum SubscriptionPlan {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
  PAUSED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum AddonType {
  EXTRA_USERS
  EXTRA_STORAGE
  API_CALLS
  INTEGRATIONS
  CUSTOM_BRANDING
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  EMPLOYEE
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum UsageResource {
  USER_COUNT
  STORAGE
  API_CALLS
  BOOKINGS
  SERVICES
  INTEGRATIONS
}
