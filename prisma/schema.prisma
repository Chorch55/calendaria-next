// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Company {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  phone               String?
  logo_url            String?
  website             String?
  subscription_plan   String   @default("basic") // basic, premium, enterprise
  subscription_status String   @default("active") // active, inactive, suspended
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relations
  users     User[]
  services  Service[]
  bookings  Booking[]
  payments  Payment[]
  schedules Schedule[]

  @@map("companies")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password_hash String? // For credentials login
  company_id    String?
  role          String    @default("user") // super_admin, admin, manager, employee, user
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // Application relations
  company           Company?           @relation(fields: [company_id], references: [id])
  bookings_created  Booking[]          @relation("BookingCreatedBy")
  bookings_assigned Booking[]          @relation("BookingAssignedTo")
  schedules         Schedule[]
  time_logs         TimeLog[]
  user_services     UserService[]
  notifications     Notification[]
  tasks_created     Task[]             @relation("TaskCreatedBy")
  tasks_assigned    Task[]             @relation("TaskAssignedTo")
  user_permissions  UserPermission[]

  @@map("users")
}

model Service {
  id           String  @id @default(cuid())
  company_id   String
  name         String
  description  String?
  duration     Int // minutes
  price        Decimal @db.Decimal(10, 2)
  is_active    Boolean @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  company       Company       @relation(fields: [company_id], references: [id])
  bookings      Booking[]
  user_services UserService[]

  @@map("services")
}

model UserService {
  id         String @id @default(cuid())
  user_id    String
  service_id String

  user    User    @relation(fields: [user_id], references: [id])
  service Service @relation(fields: [service_id], references: [id])

  @@unique([user_id, service_id])
  @@map("user_services")
}

model Booking {
  id           String   @id @default(cuid())
  company_id   String
  service_id   String
  client_name  String
  client_email String
  client_phone String?
  start_time   DateTime
  end_time     DateTime
  status       String   @default("pending") // pending, confirmed, cancelled, completed
  notes        String?
  created_by   String?
  assigned_to  String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  company      Company  @relation(fields: [company_id], references: [id])
  service      Service  @relation(fields: [service_id], references: [id])
  creator      User?    @relation("BookingCreatedBy", fields: [created_by], references: [id])
  assignee     User?    @relation("BookingAssignedTo", fields: [assigned_to], references: [id])
  payments     Payment[]

  @@map("bookings")
}

model Payment {
  id         String   @id @default(cuid())
  company_id String
  booking_id String?
  amount     Decimal  @db.Decimal(10, 2)
  currency   String   @default("EUR")
  status     String   @default("pending") // pending, completed, failed, refunded
  method     String? // card, cash, transfer
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  company Company  @relation(fields: [company_id], references: [id])
  booking Booking? @relation(fields: [booking_id], references: [id])

  @@map("payments")
}

model Schedule {
  id         String   @id @default(cuid())
  company_id String
  user_id    String
  day_of_week Int     // 0-6 (Sunday to Saturday)
  start_time String  // HH:MM format
  end_time   String  // HH:MM format
  is_active  Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  company Company @relation(fields: [company_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])

  @@unique([company_id, user_id, day_of_week])
  @@map("schedules")
}

model TimeLog {
  id          String   @id @default(cuid())
  user_id     String
  clock_in    DateTime
  clock_out   DateTime?
  total_hours Decimal? @db.Decimal(5, 2)
  notes       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@map("time_logs")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo") // todo, in_progress, completed, cancelled
  priority    String   @default("medium") // low, medium, high, urgent
  due_date    DateTime?
  created_by  String
  assigned_to String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  creator  User  @relation("TaskCreatedBy", fields: [created_by], references: [id])
  assignee User? @relation("TaskAssignedTo", fields: [assigned_to], references: [id])

  @@map("tasks")
}

model Notification {
  id         String   @id @default(cuid())
  user_id    String
  title      String
  message    String
  type       String   @default("info") // info, success, warning, error
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@map("notifications")
}

model UserPermission {
  id         String @id @default(cuid())
  user_id    String
  permission String
  granted_at DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@unique([user_id, permission])
  @@map("user_permissions")
}
